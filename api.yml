openapi: 3.0.0
info:
  title: microblog API
  description: |
    microblog API.
  version: 1.0.0
tags:
  - name: accounts
    description: CRUD of accounts
  - name: posts
    description: CRUD of posts 
  - name: Comment
    description: Comments endpoints
  - name: Post
    description: Posts endpoints

paths:
  
  /posts:
    get:
      summary: List of posts depend on a specific user 
      tags:
        - posts
      description:  This will return a list of posts
      responses:
        '200':
          description: return a list of posts  
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responsePostDTO"
    post:
      summary: Create a post
      tags:
        - posts
      description:  This will create a post
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestPostDTO"
      responses:
        '200':
          description: return a list of posts  
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/responsePostDTO"
  /posts/{postId}:
    get:
      summary: Return a specific post 
      tags:
        - posts
      description:  This will return a post
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        '200':
          description: return a post  
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responsePostDTO"
    patch:
      summary: Partial update a specific post
      tags:
        - posts
      description:  This will do a partial update, change status of is_public 
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateReqPostDTO"
      responses:
        '200':
          description: return a list of posts  
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/responsePostDTO"
    put:
      summary: Do a total update a specific post
      tags:
        - posts
      description:  do a total update a post 
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/responsePostDTO"
      responses:
        '200':
          description: return a list of posts  
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/responsePostDTO"
    delete:
      summary: delete a specific post by id
      tags:
        - posts
      description:  This will delete a post
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        '204':
          description: return a list of posts  

  /posts/{post_id}/comments:
    parameters:
      - name: post_id
        in: path
        description: post id
        required: true
        schema:
          type: string
          format: id
    get:
      tags:
        - Comment
      summary: Returns comments from post
      description: Returns a list of comments
      responses:
        '200':
          description: Comments returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
    
    post:
      tags:
        - Comment
      summary: Send a comment
      description: a user comments on a post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentBody'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    
  /posts/{post_id}/comments/{comment_id}:
    parameters: 
      - name: post_id
        in: path
        description: post id
        required: true
        schema:
          type: string
          format: id
      - name: comment_id
        in: path
        description: comment id
        required: true
        schema:
          type: string
          format: id
    get:
      tags: 
        - Comment
      summary: Read a comment
      description: Reading a comment
      responses:
        '200':
          description: Comment object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  
    delete:
      tags: 
        - Comment
      summary: Delete a comment
      description: a user deletes a comment
      responses:
        '200':
          description: Comment deleted
      
    put:
      tags: 
        - Comment
      summary: Update comment
      description: User updates his comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentBody'
      responses:
        '200':
          description: The commend object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

components:
  schemas:
    requestPostDTO:
      type: object
      description: A created post
      properties:
        id:
          description: |
            Unique ID identifying a post
          type: string
          format: uuid
        title:
          type: string
          example: My first blog
        content:
          description: post's description 
          type: string
          example: My first blog's description 
        is_public:
          type: boolean
          example: true
        createdAt:
          type: string
        user:
          type: object
          description: user who created this post
          properties:
            userId:
              description: user's id
              type: string
              format: uuid
        
    responsePostDTO:
      type: object
      description: A posts
      properties:
        title:
          type: string
          example: My first blog
        content:
          description: post's description 
          type: string
          example: My first blog's description 
        is_public:
          type: boolean
          example: true
        createdAt:
          type: string
          
    updateReqPostDTO:
      type: object
      description: A posts
      properties:
        title:
          type: string
          example: My first blog
        content:
          description: post's description 
          type: string
          example: My first blog's description 
        is_public:
          type: boolean
          example: true

    Comment:
      type: object
      properties:
        id:
          type: string
          format: id
        user_id:
          type: string
        post_id:
          type: number
        content:
          type: string
        is_public:
          type: boolean
    CommentBody:
      type: object
      properties:
        content:
          type: string

  parameters:
    postId:
      name: postId
      in: path
      required: true
      description: Post's identification
      schema:
        type: string
