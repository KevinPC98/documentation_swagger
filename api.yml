openapi: 3.0.0
info:
  title: microblog API
  description: |
    microblog API.
  version: 1.0.0
tags:
  - name: auth
    description: users authentication 
  - name: posts
    description: CRUD of posts 
  - name: comment
    description: CRUD of comments
  - name: like
    description: CRUD of Like

paths:
  /auth/login:
    post:
      summary: a user login  
      tags:
      - auth
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/requestLoginDTO"
      responses:
        '201':
          description: successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseLoginDTO"
        '400':
          description: email and password aren't corrects
    
  /auth/signup:
    post:
      summary: a user sign up
      tags:
      - auth
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/requestSignupDTO"
      responses:
        '201':
          description: successful sign up 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseSignupDTO"
        '409':
          description: email is currently being used
          
  /auth/profile:
    get:
      summary: return a user's profile
      tags:
      - auth
      responses:
        '200':
          description: This will return a user's profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userDTO"
    
    patch:
      summary: update a user's profile
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUserDTO"
      responses:
        '201':
          description: This will update a user's profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userDTO"
  
  /auth/forgotPassword:
    post:
      summary: user forgot password
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                  example: example@gmail.com
      responses:
        '201':
          description: return 
          content:
            application/json:
              schema:
                type: object
                properties:
                  email: 
                    type: string
                    example: example@gmail.com
                  
                  tempPassword: 
                    type: string
                    example: sd@f3$9^9k#
                
  /auth/logout:
    delete:
      summary: user logout
      tags:
      - auth
      responses: 
        '204': 
          description: user logout successfully
  /posts:
    get:
      summary: List of posts depend on a specific user 
      tags:
        - posts
      description:  This will return a list of posts
      responses:
        '200':
          description: return a list of posts  
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responsePostDTO"
    post:
      summary: Create a post
      tags:
        - posts
      description:  This will create a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestPostDTO"
      responses:
        '200':
          description: return a list of posts  
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/responsePostDTO"
  /posts/{postId}:
    get:
      summary: Return a specific post 
      tags:
        - posts
      description:  This will return a post
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        '200':
          description: return a post  
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responsePostDTO"
    patch:
      summary: Partial update a specific post
      tags:
        - posts
      description:  This will do a partial update, change status of is_public 
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateReqPostDTO"
      responses:
        '200':
          description: return a list of posts  
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/responsePostDTO"
    
    delete:
      summary: delete a specific post by id
      tags:
        - posts
      description:  This will delete a post
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        '204':
          description: return a list of posts  
  /posts/{postId}/like:
    post:
      summary: user like the post 
      tags:
      - like
      parameters:
      - $ref: "#/components/parameters/postId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                like:
                  type: boolean
                  example: true
      responses:
        '201':
          description: This will put a like in a post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message" 
    get: 
      summary: show a list of likes 
      tags: 
      - like
      parameters:
        - $ref: "#/components/parameters/postId"
        - $ref: '#/components/parameters/like'
      responses:
        '200':
          description: like returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/likeDTO'
    patch:
      tags: 
        - like
      summary: Update like
      description: User updates modifies his like
      parameters:
        - $ref: "#/components/parameters/postId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestLikeDTO'
      responses:
        '200':
          description: The like object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  
    delete:
      tags: 
        - like
      summary: user removes his like
      description: a user removes his like
      parameters:
        - $ref: "#/components/parameters/postId"
      responses:
        '204':
          description: like removed
        

  /posts/{postId}/comments:
    parameters:
      - $ref: "#/components/parameters/postId"
    get:
      tags:
        - comment
      summary: Returns comments from post
      description: Returns a list of comments
      responses:
        '200':
          description: Comments returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/commentDTO'
        '404':
          description: Post doesn't exists
    
    post:
      tags:
        - comment
      summary: Send a comment
      description: a user comments on a post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestCommentDTO'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentDTO'
    
  /posts/{postId}/comments/{commentId}:
    parameters: 
      - $ref: "#/components/parameters/postId"
      - $ref: "#/components/parameters/commentId"

    get:
      tags:
        - comment
      summary: Read a comment
      description: Reading a comment
      responses:
        '200':
          description: Comment object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentDTO'
        '400':
          description: Comment doesn't exists
  
    patch:
      tags: 
        - comment
      summary: Update comment
      description: User updates his comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestCommentDTO'
      responses:
        '200':
          description: The comment object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentDTO'
  
    delete:
      tags: 
        - comment
      summary: Delete a comment
      description: a user deletes a comment
      responses:
        '200':
          description: Comment deleted
  
  /posts/{postId}/comments/{commentId}/like:
    parameters: 
      - $ref: "#/components/parameters/postId"
      - $ref: "#/components/parameters/commentId"

    get:
      tags:
        - like
      summary: likes from comments
      parameters:
        - $ref: '#/components/parameters/like'
      responses:
        '200':
          description: return a count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/likeDTO'
  
    post:
      tags:
        - like
      summary: Send a like
      description: a user likes a comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestLikeDTO'
      responses:
        '201':
          description: Like created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseLikeDTO'
    
    patch:
      tags: 
        - like
      summary: Update like
      description: User updates modifies his like
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestLikeDTO'
      responses:
        '201':
          description: The like object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  
    delete:
      tags: 
        - like
      summary: user removes his like
      description: a user removes his like
      responses:
        '204':
          description: like removed

components:
  schemas:
    requestLoginDTO:
      type: object
      description: a email and password
      properties:
        email:
          type: string
          example: example@gmail.com
        password:
          type: string
          example: 23456789
    responseLoginDTO:
      type: object
      description: A token
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    requestSignupDTO:
      type: object
      description: A new user
      properties:
        name:
          type: string
          example: John 
        username:
          type: string
          example: user1 
        email:
          type: string
          example: example@gmail.com
        pasword:
          type: string
          example: 23456
        passwordConfirmation:
          type: string
          example: 23456
    responseSignupDTO:
      type: object
      description: A new user
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: John 
        username:
          type: string
          example: user1 
        email:
          type: string
          example: example@gmail.com
    userDTO:
      type: object
      description: A created post
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: John
        username: 
          type: string
          example: user1
        email:
          type: string
          example: example@gmail.com
        isPublishedEmail:
          type: boolean
          example: true
        isPublishedName:
          type: boolean
          example: true
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
        updatedAt:
          type: string
    updateUserDTO:
      type: object
      description: A created post
      properties:
        name:
          type: string
          example: John
        username: 
          type: string
          example: user1
        email:
          type: string
          example: example@gmail.com
        isPublishedEmail:
          type: boolean
          example: true
        isPublishedName:
          type: boolean
          example: true
        isActive:
          type: boolean
          example: true

    requestPostDTO:
      type: object
      description: A created post
      properties:
        id:
          description: |
            Unique ID identifying a post
          type: string
          format: uuid
        title:
          type: string
          example: My first blog
        content:
          description: post's description 
          type: string
          example: My first blog's description 
        is_public:
          type: boolean
          example: true
        createdAt:
          type: string
        user:
          type: object
          description: user who created this post
          properties:
            userId:
              description: user's id
              type: string
              format: uuid
        
    responsePostDTO:
      type: object
      description: A posts
      properties:
        title:
          type: string
          example: My first blog
        content:
          description: post's description 
          type: string
          example: My first blog's description 
        is_public:
          type: boolean
          example: true
        createdAt:
          type: string
          
    updateReqPostDTO:
      type: object
      description: A posts
      properties:
        title:
          type: string
          example: My first blog
        content:
          description: post's description 
          type: string
          example: My first blog's description 
        is_public:
          type: boolean
          example: true

    commentDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
        post_id:
          type: number
        content:
          type: string
          example: "first comment"
        is_public:
          type: boolean
  
    requestCommentDTO:
      type: object
      properties:
        content:
          type: string
    
    likeDTO:
      type: object
      properties:
        count:
          type: number
    
    requestLikeDTO:
      type: object
      properties:
        like:
          type: boolean
          
    responseLikeDTO:
      type: object
      properties:
        like:
          type: boolean
    message:
      type: object
      properties:
        message: 
          type: string
          example: suscessful action
  parameters:
    postId:
      name: postId
      in: path
      required: true
      description: post id
      schema:
        type: string
        format: id
    commentId:
      name: commentId
      in: path
      description: comment id
      required: true
      schema:
        type: string
        format: id
    likeId:
      name: likeId
      in: path
      description: like id
      required: true
      schema:
        type: string
        format: id
    like:
      name: like
      in: query
      required: true
      schema:
        type: boolean
        example: true
